{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf110
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww15380\viewh10840\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Leart Krasniqi\
ECE 160 \
Prof. Kirtman\
Assignment 1\
\
\

\b \ul Program Descriptions:
\b0 \ulnone \
\
1)  This program initially sets up a character array (ar) that will contain ten elements.  It then sets a pointer (ptr) that points to a character and initializes the pointer to the address of ar[3] (i.e. the third element of the array).  The resulting statements print out values depending on the question being asked.  The first, second, and third printf statements print the addresses of the zeroth element, the third element, and the pointer, respectively.  The next two printf statements display the contents held within the third element or the array and within the address held in the pointer (which should ultimately be the same thing).  The next printf statement reveals the size of a char, which was determined to be one byte, based off of the results from Part A and Part B.  To be sure, the final printf statement prints the size of one element of the array using the sizeof() command in C.\
\
\
2) This program initially sets up a long array (ar) that will contain ten elements.  It then sets a pointer (ptr) that points to a character and initializes the pointer to the address of ar[3] (i.e. the third element of the array).  The resulting statements print out values depending on the question being asked.  The first, second, and third printf statements print the addresses of the zeroth element, the third element, and the pointer, respectively.  The next two printf statements display the contents held within the third element or the array and within the address held in the pointer (which should ultimately be the same thing).  The next printf statement reveals the size of a long, which was determined to be four bytes, based off of the results from Part A and Part B.  To be sure, the final printf statement prints the size of one element of the array using the sizeof() command in C.\
\
\
\
3) This program initially sets a long variable (lng) to the decimal number 136792.  The next part is a for loop that is used to display the number stored within each individual byte of the long.  The for loop is initialized with i = 0, the maximum condition being the maximum size of a long (i.e. 8 bytes, as determined in Problem 2), and the update being to increment i by one.  In the body of the loop, the variable byte is set to be a pointer to an unsigned character (i.e. an individual byte).  The variable is then set to equal the address of lng.  In the printf statement, the contents held within each address is taken care of with the *(byte + i) because it changes the address at which the pointer points to during each increment of i.  The result is that it displays the values of bytes 0-7 (in hex), ultimately reading 0000021658, which is equivalent to the decimal number 136792.}